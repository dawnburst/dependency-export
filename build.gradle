import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:4.0.1'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    testCompile("junit:junit")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}


task saveProjectDependencies {

    String depenenciesFiles = "";
    Set dependencyList = [];

    configurations
            .findAll { it.canBeResolved }
            .each {
        con ->
            con.resolvedConfiguration.resolvedArtifacts.each {
                dependencyList.add(it.getModuleVersion().toString() + "~" + it.file.getName().toString());
            }

    }

    dependencyList.each {
        depenenciesFiles += it.toString() + "\n";
    }

    println depenenciesFiles;

//    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss");
//    String timeStamp = LocalDateTime.now().format(dateTimeFormatter)
//
//    String fileName = "dependencies_" + timeStamp + ".txt";
    String fileName = "dependencies.txt";
    File file = new File(fileName)
    file.write depenenciesFiles
}

task compareDependencies{
//    String file = new File("dependencies_20190306_162153.txt").getText()
//    print file

    Set dependencyList = [];

    configurations
            .findAll { it.canBeResolved }
            .each {
        con ->
            con.resolvedConfiguration.resolvedArtifacts.each {
                dependencyList.add(it.getModuleVersion().toString() + "~" + it.file.getName().toString());
            }
    }

    new File("dependencies.txt").eachLine{
        line -> dependencyList.remove(line)
    }

    if (dependencyList.size() > 0) {
        println "Unable to find the following dependencies:"
        dependencyList.each {
            print it.toString() + "\n";
        }
    }
    else {
        println "All dependencies was found"
    }

}
